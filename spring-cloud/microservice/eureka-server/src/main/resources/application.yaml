management:
  security:
    enabled: false
server:
  port: ${port:8761}
# Tomcat
  tomcat:
    max-connections: 1000 # 最大连接数
    uri-encoding: UTF-8
    max-threads: 1000 # 最大线程数
    min-spare-threads: 30 #最小空闲数
    accept-count: 50 #线程数达到最大时, 允许排队请求个数

#读取pom中的名字作为应用名称
spring:
  application:
    name: '@artifactId@'
  profiles:
    active: dev #默认开发模式单体
  # 2.0.3以后需要放到spring后面，不然无效凭证
  security:
    basic:
      enabled: true
    user:
      name: user # 配置登录用户user
      password: password #配置登录密码password

---
spring:
  profiles: dev

# 默认单注册中心, 类似properties　默认配置会带入到所有peer配置中, 比如security安全配置
eureka:
  client:
    # 下面两个参数控制不进行注册，本身就死注册中心
    fetch-registry: false
    register-with-eureka: false
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:${server.port}/eureka
  instance:
    # 读取的是/etc/host 中的localhost
    hostname: localhost
    # 自定义元数据
    metadataMap:
      my-metadata: hello
  # 加快服务清理, 只在开发测试时使用
  server:
    # THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.
    enable-self-preservation: false # 设为false表示关闭自我保护
    eviction-interval-timer-in-ms: 4000 # 清理间隔,单位ms

---
# 多注册中心分别启动peer1/2
spring:
  profiles: peer1
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@peer2:8762/eureka
  instance:
    hostname: peer1
management:
  security:
    enabled: false
server:
  port: ${port:8761}

---
spring:
  profiles: peer2
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@peer1:8761/eureka
  instance:
    hostname: peer2
management:
  security:
    enabled: false
server:
  port: ${port:8762}
